npm run mix - Agora em todo momento que no curso eu digitar npm run dev, você vai executar npm run mix.
Isso deve ser o suficiente para você seguir usando o Mix como ferramenta para o front-end.

1)Qual o propósito da função asset?
Nos retornar o caminho de um asset (arquivo estático) que pode inclusive estar em outro domínio.

Alternativa correta! Em nosso projeto, todos os assets estão no local padrão, que é a pasta public. Mas em projetos mais complexos,
nós podemos configurar um projeto separado para ter nossos assets, usando CDN, por exemplo. Com isso, a função asset verifica se há essa
configuração e já busca o domínio correto.

2)Para criar o schema no banco de dados no último vídeo nós utilizamos migrations.
Além de simplesmente executar um CREATE TABLE, quais outras vantagens obtemos ao utilizar migrations?

Sincronização dos bancos locais da equipe.
Ao realizar uma alteração no banco, podemos solicitar que nossos colegas de equipe rodem a migration
recém criada e seus bancos de dados locais estarão com o schema atualizado.

Versionamento do banco.
Alternativa correta! Assim como podemos versionar nosso código com GIT, podemos versionar nosso schema do banco de dados com migrations.
 Podemos reverter migrations, executar uma a uma, executar todas de uma vez, etc. No nosso caso, por exemplo, o método down
 (que reverte a migration) simplesmente remove a tabela series. Isso é o necessário para desfazer esta alteração em nosso banco.

 O Laravel possui uma proteção contra um ataque chamado Cross-Site Request Forgery (CSRF). Todo formulário que nós enviamos para o Laravel precisa ter uma informação extra:
 um token. Esse token permite que o Laravel verifique que a requisição realmente foi enviada por um formulário do site.
 Felizmente essa informação é simples de se adicionar, bastando usar a diretiva @csrf do blade. :-D

 3)O que acontece se algum atributo passado no array como parâmetro para o método create não estiver no array de $fillable daquela model?
 Este atributo simplesmente não será preenchido.
 Alternativa correta! O que não estiver no $fillable, ao tentar ser preenchido com mass assignment será simplesmente ignorado.

 4)Vimos neste vídeo como dar nomes para nossas rotas e como usar esses nomes para criar links e para redirecionar os usuários.
 Qual a vantagem de se ter nomes em nossas rotas?

 Se a URL precisar ser alterada no futuro, nada no código precisará ser mexido.
 Alternativa correta! Se nós precisarmos mudar de /series/create para /serie/criar, nosso código vai continuar funcionando perfeitamente,
 sem nenhum link ou redirecionamento quebrar.

5)Neste vídeo, ao invés de termos um simples link como nosso botão de exclusão, nós criamos um formulário.
 Por que não é interessante ter um link com ações destrutivas?

 Porque um link pode ser acessado por crawlers de busca que vão performar ações destrutivas em nosso sistema.
 Alternativa correta! Ao ter um link que remova algo, faça logout ou algo do tipo, robôs que seguem links podem acabar causando um certo estrago em nossa aplicação.
  Ações destrutivas devem sempre ser feitas em requisições POST através de formulários.

6)Nós enviamos o ID da série a ser excluída através de um parâmetro em nossa rota.
  Como podemos definir um parâmetro chamado id em uma rota para /teste usando o verbo GET?

  Route::get('/teste/{id}', …);

  Alternativa correta! Desta forma, nosso Request vai ter uma propriedade ID acessível. Nós também podemos ter um parâmetro chamado $id em nosso controller,
  sem precisar acessar o $request.

  7)Neste vídeo nós criamos uma interface para representar um repositório de séries.
    Qual a principal vantagem de termos uma interface?

    Podemos ter diferentes implementações deste repositório.

    Alternativa correta! Se eu quiser migrar o meu sistema de Eloquent para Doctrine, por exemplo, posso fazer isso em uma nova classe,
    mantendo a classe atual no projeto durante a migração por exemplo. Basta que ambas implementem a mesma interface. Posso também ter implementações específicas
    para testes como um repositório em memória, por exemplo. Isso nos dá bastante flexibilidade.
